version: '3.8'

services:
  #############################################
  # Infrastructure Services
  #############################################
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-yeyzer}
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
      - ./infrastructure/docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-""}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT_ALLOW_RECOVERY_MODE=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  #############################################
  # Monitoring & Observability
  #############################################
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./infrastructure/docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - yeyzer_network
    depends_on:
      - cadvisor
      - node-exporter

  # Grafana
  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    restart: unless-stopped
    networks:
      - yeyzer_network
    depends_on:
      - prometheus

  # cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - yeyzer_network

  #############################################
  # Application Services
  #############################################
  
  # Auth Service
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=${JWT_EXPIRY}
      - JWT_REFRESH_EXPIRY=${JWT_REFRESH_EXPIRY}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
      - LINKEDIN_CALLBACK_URL=${LINKEDIN_CALLBACK_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - SESSION_MAX_AGE=${SESSION_MAX_AGE}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH}
      - PROMETHEUS_METRICS_PORT=${PROMETHEUS_METRICS_PORT}
    ports:
      - "4001:4001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Profile Service
  profile-service:
    build:
      context: ./services/profile
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH}
      - PROMETHEUS_METRICS_PORT=${PROMETHEUS_METRICS_PORT}
    ports:
      - "4002:4002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Scraper Service
  scraper-service:
    build:
      context: ./services/scraper
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - CRUNCHBASE_API_KEY=${CRUNCHBASE_API_KEY}
      - SCRAPER_CACHE_TTL=${SCRAPER_CACHE_TTL}
      - SCRAPER_RATE_LIMIT=${SCRAPER_RATE_LIMIT}
      - SCRAPER_MAX_DEPTH=${SCRAPER_MAX_DEPTH}
      - SCRAPER_TWITTER_MAX_TWEETS=${SCRAPER_TWITTER_MAX_TWEETS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH}
      - PROMETHEUS_METRICS_PORT=${PROMETHEUS_METRICS_PORT}
    ports:
      - "4003:4003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Match Engine
  match-engine:
    build:
      context: ./services/match-engine
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - VECTOR_URL=${VECTOR_URL}
      - VECTOR_API_KEY=${VECTOR_API_KEY}
      - MATCH_SCORING_THRESHOLD=${MATCH_SCORING_THRESHOLD}
      - MATCH_REFRESH_CRON=${MATCH_REFRESH_CRON}
      - MATCH_RESULTS_LIMIT=${MATCH_RESULTS_LIMIT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORG_ID=${OPENAI_ORG_ID}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH}
      - PROMETHEUS_METRICS_PORT=${PROMETHEUS_METRICS_PORT}
    ports:
      - "4004:4004"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Conversation Service
  conversation-service:
    build:
      context: ./services/conversation
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORG_ID=${OPENAI_ORG_ID}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - FEATURE_AUTO_ICEBREAKERS=${FEATURE_AUTO_ICEBREAKERS}
      - SAFETY_PROFANITY_FILTER_LEVEL=${SAFETY_PROFANITY_FILTER_LEVEL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH}
      - PROMETHEUS_METRICS_PORT=${PROMETHEUS_METRICS_PORT}
    ports:
      - "4005:4005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Venue Service
  venue-service:
    build:
      context: ./services/venue
      dockerfile: Dockerfile
    environment:
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - GOOGLE_MAPS_PLACES_API_KEY=${GOOGLE_MAPS_PLACES_API_KEY}
      - REDIS_URL=${REDIS_URL}
      - VENUE_DEFAULT_RADIUS=${VENUE_DEFAULT_RADIUS}
      - VENUE_PRICE_MIN=${VENUE_PRICE_MIN}
      - VENUE_PRICE_MAX=${VENUE_PRICE_MAX}
      - VENUE_TYPES=${VENUE_TYPES}
      - FEATURE_VENUE_RECOMMENDATIONS=${FEATURE_VENUE_RECOMMENDATIONS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH}
      - PROMETHEUS_METRICS_PORT=${PROMETHEUS_METRICS_PORT}
    ports:
      - "4006:4006"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Voice Service
  voice-service:
    build:
      context: ./services/voice
      dockerfile: Dockerfile
    environment:
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ELEVENLABS_VOICE_ID=${ELEVENLABS_VOICE_ID}
      - WHISPER_API_KEY=${WHISPER_API_KEY}
      - VOICE_WAKE_WORD=${VOICE_WAKE_WORD}
      - VOICE_PTT_ENABLED=${VOICE_PTT_ENABLED}
      - VOICE_TTS_ENABLED=${VOICE_TTS_ENABLED}
      - FEATURE_VOICE_INTERFACE=${FEATURE_VOICE_INTERFACE}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH}
      - PROMETHEUS_METRICS_PORT=${PROMETHEUS_METRICS_PORT}
    ports:
      - "4007:4007"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Safety Service
  safety-service:
    build:
      context: ./services/safety
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SAFETY_PROFANITY_FILTER_LEVEL=${SAFETY_PROFANITY_FILTER_LEVEL}
      - SAFETY_CHECK_IN_HOURS=${SAFETY_CHECK_IN_HOURS}
      - SAFETY_MAX_FAILED_LOGINS=${SAFETY_MAX_FAILED_LOGINS}
      - FEATURE_SAFETY_HOOKS=${FEATURE_SAFETY_HOOKS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH}
      - PROMETHEUS_METRICS_PORT=${PROMETHEUS_METRICS_PORT}
    ports:
      - "4008:4008"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  # API Gateway
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-3000}
      - HOST=${HOST:-0.0.0.0}
      - AUTH_SERVICE_URL=http://auth-service:4001
      - PROFILE_SERVICE_URL=http://profile-service:4002
      - SCRAPER_SERVICE_URL=http://scraper-service:4003
      - MATCH_ENGINE_URL=http://match-engine:4004
      - CONVERSATION_SERVICE_URL=http://conversation-service:4005
      - VENUE_SERVICE_URL=http://venue-service:4006
      - VOICE_SERVICE_URL=http://voice-service:4007
      - SAFETY_SERVICE_URL=http://safety-service:4008
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - COOKIE_SECURE=${COOKIE_SECURE}
      - COOKIE_SAME_SITE=${COOKIE_SAME_SITE}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH}
      - PROMETHEUS_METRICS_PORT=${PROMETHEUS_METRICS_PORT}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    depends_on:
      - auth-service
      - profile-service
      - scraper-service
      - match-engine
      - conversation-service
      - venue-service
      - voice-service
      - safety-service
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${PORT:-3000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:${PORT:-3000}
        - NEXT_PUBLIC_VOICE_WS_URL=ws://localhost:4007
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://localhost:${PORT:-3000}
      - NEXT_PUBLIC_VOICE_WS_URL=ws://localhost:4007
      - FEATURE_VOICE_INTERFACE=${FEATURE_VOICE_INTERFACE}
      - FEATURE_VENUE_RECOMMENDATIONS=${FEATURE_VENUE_RECOMMENDATIONS}
      - FEATURE_AUTO_ICEBREAKERS=${FEATURE_AUTO_ICEBREAKERS}
      - FEATURE_SAFETY_HOOKS=${FEATURE_SAFETY_HOOKS}
    ports:
      - "3000:3000"
    depends_on:
      - gateway
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - yeyzer_network

networks:
  yeyzer_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:
